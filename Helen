#!/bin/bash -e
sch () {
	if [[ $distro == Ubuntu ]]
	then
		if [[ $nam == skype || $nam == vscode ]]
		then
			what=snap
		else
			what=apt
		fi
	else
		if [[ $nam == skype || $nam == vscode ]]
		then
			what=snap
		elif [[ $nam == snapd || $nam == python3 || $nam == "gestures libinput-gestures" || $nam == timeshift || $nam == wps-office || $nam == woeusb || $nam == boxes || $nam == nudoku ]]
		then
			what=pakku
		else
			what=pacman
		fi
	fi
	}
#Going to Home and declaring variables
chkStr () {
	if grep -q $Str ".config/helen_config.txt"; then
		$doIt
	else
		eval $StrCm
		clear
	fi
	}
cd
snapt=no
pakkut=yes
Str='pakkut=yes'
StrCm='pakkut=no'
doIt=:
chkStr
nam=""
name=""
what=apt
version="0.2.1"
sleep 0.1
clear
#Set title
mytitle=$version
echo -e '\033]2;'$mytitle'\007'
#Checking requirements
chkarch () {
	if pacman -Qi $name > /dev/null ; then
	  echo "Ok. Package $name is installed."
	  sleep 1
	else
	  echo "The package $name is not installed. Installing "$name"..."
	  sudo pacman -Sq --noconfirm $name > /dev/null
	  clear
	fi
	}
chkdeb () {
    PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $name|grep "install ok installed")
    echo "Checking for "$name": " $PKG_OK
    if [ "" == "$PKG_OK" ]; then
        echo "No "$name". Setting up "$name"..."
        sudo aptitude install $name -y
        sleep 1
        clear
    else
        echo $name" is installed already."
        sleep 1
    fi
    }
depChk () {
		if [[ $distro == Ubuntu ]]
		then
			name=apt
			chkdeb
			name=wmctrl
			chkdeb
			name=xdg-utils
			chkdeb
			name=whiptail
			chkdeb
			name=dialog
			chkdeb
			name=software-properties-common
			chkdeb
			name=git
			chkdeb
			name=wget
			chkdeb
			echo "compatible" > .config/helen_config.txt
			cd
		else
			name=wmctrl
			chkarch
			name=pakku
			if pacman -Qi $name > /dev/null ; then
				echo 'pakkut=yes' >> .config/helen_config.txt
				pakkut=yes
			fi
			name=xdg-utils
			chkarch
			name=dialog
			chkarch
			name=git
			chkarch
			name=wget
			chkarch
			echo "compatibleArch" >> .config/helen_config.txt
			cd
		fi
	}
    promptDialogSpec () {   #Feedback for user (for func.s)
        clear
        $nam
        clear
        echo 'Done!'
        sleep 1.5
        }
    pakkuIns () {
    	clear
        echo "Setting up pakku..."
        sleep 1
        git clone https://aur.archlinux.org/pakku.git
        cd pakku
        makepkg -si
        rm -rf pakku
        echo "Done!"
        sleep 1
        clear
       }
    powins () {
    	echo "Installing powertop..."
    	sleep 1
    	sudo add-apt-repository ppa:eugenesan/ppa
    	sudo apt update
    	sudo apt install powertop
    	clear
    	read -p "Configuring powertop. This will take a while... Don't let your PC to go to sleep! Press enter when ready..."
    	sudo powertop -c
    	sudo powertop --auto-tune
    	clear
    	echo "Ready!"
    	sleep 1
    	clear
    }
    promptDialog () {   #Same.. Just for single apps from repo or snap
        clear
        sch
	    if [[ $what == "snap" && $snapt == "no" ]]
		then
			if (whiptail --title "Snapd is required!" --yesno "Snapd is required for "$nam". Would you like to install it? If you select no you'll be redirected to the program selection page." 10 80); then
				namtmp=$nam
				snapIns
		        nam=$namtmp
		        echo 'Working on '$nam'...'
				sleep 1
				eval sudo $what install $nam --classic
				clear
				echo 'Done!'
				sleep 1
				clear
			else
		    	adv
		    fi
		elif [[ $what == "snap" && $snapt == yes ]]
		then
			echo 'Working on '$nam'...'
			sleep 1
		    eval sudo $what install $nam --classic
		    clear
		    echo 'Done!'
		    sleep 1
		    clear
		elif [[ $what == pacman ]]
		then
			echo 'Working on '$nam'...'
			sleep 1
		    eval sudo $what -Sq --noconfirm $nam
		    clear
		    echo 'Done!'
		    sleep 1
		    clear
		elif [[ $what == pakku && $pakkut == no ]]
		then
			if (whiptail --title "Pakku is required!" --yesno "Pakku is required for "$nam". Would you like to install it? If you select no you'll be redirected to the homepage." 10 80); then
				pakkuIns
		        echo 'Working on '$nam'...'
				sleep 1
				eval sudo $what -Sq --noconfirm $nam
				clear
				echo 'Done!'
				sleep 1
				clear
			else
		    	no1
		    fi
		elif [[ $what == pakku && $pakkut == yes ]]
		then
			echo 'Working on '$nam'...'
			sleep 1
		    eval sudo $what -Sq --noconfirm $nam
		    clear
		    echo 'Done!'
		    sleep 1
		    clear
        else
            echo 'Working on '$nam'...'
            sleep 1
		    eval sudo $what install $nam -y
		    clear
		    echo 'Done!'
		    sleep 1
		    clear
		fi
		sleep 1.5
        }
    snapIns () {
    	nam=snapd
    	sch
        snapt=yes
        promptDialog
        if [[ $distro == Arch ]];then
   		sudo systemctl enable --now snapd.socket
        sudo ln -s /var/lib/snapd/snap /snap
        fi
       }
    timsIns () {    #Timeshift
        sleep 0.5
        echo 'Installing timeshift...'
        nam=software-properties-common
        promptDialog
        eval sudo add-apt-repository -y ppa:teejee2008/ppa
        eval sudo apt update
        eval sudo apt install timeshift -y
        }
    etcher () {
    	cd
    	sudo echo "deb https://deb.etcher.io stable etcher" | sudo tee /etc/apt/sources.list.d/balena-etcher.list
    	sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 379CE192D401AB61
    	sudo apt-get update
    	sudo apt-get install balena-etcher-electron
    	}
    exRep () {
    	echo '[multilib]' | sudo tee -a /etc/pacman.conf
    	echo 'Include = /etc/pacman.d/mirrorlist' | sudo tee -a /etc/pacman.conf
    	echo 'exRep' >> .config/helen_config.txt
        }
    aptFast () {    #Apt-fast
        sleep 0.5
        echo 'Installing apt-fast...'
        nam=software-properties-common
        promptDialog
        eval sudo add-apt-repository -y ppa:apt-fast/stable
        eval sudo apt update
        eval sudo apt install apt-fast -y
        }
    operaInstall () {   #Opera
        echo 'Installing Opera from Opera website...'
        eval wget https://download1.operacdn.com/pub/opera/desktop/57.0.3098.110/linux/opera-stable_57.0.3098.110_amd64.deb
        eval sudo dpkg -i opera-stable_57.0.3098.110_amd64.deb
        eval sudo apt update
        eval sudo rm opera-stable_57.0.3098.110_amd64.deb 
        }
    gesturesSetup () {  #Libinput gestures + GUI + xdotool
        echo 'Installing xdotool and wmctrl...'
        eval sudo apt install xdotool wmctrl -y
        echo 'Done!'
        echo 'Installing libinput-tools...'
        eval sudo apt install libinput-tools -y
        echo 'Done!'
        echo 'Setting input permisson for gestures...'
        eval sudo gpasswd -a $USER input
        echo 'Done! ATTENTION!! You need to reboot to apply this operation!'
        sleep 1
        echo 'Cloning libinput gestures and gestures GUI from github...'
        eval git clone https://github.com/bulletmark/libinput-gestures.git
        eval git clone https://gitlab.com/cunidev/gestures
        echo 'Done!'
        echo 'Building packages...'
        eval cd libinput-gestures
        eval sudo ./libinput-gestures-setup install
        eval cd
        eval cd gestures
        eval sudo python3 setup.py install
        eval cd
        eval sudo rm -rf libinput-gestures
        eval sudo rm -rf gestures
        }
    wpsInstall () { #WPS office
        echo 'Downloading and installing WPS Office and WPS Office symbols (it takes around 7 min)...'
        eval wget http://kdl.cc.ksosoft.com/wps-community/download/6757/wps-office_10.1.0.6757_amd64.deb
        eval wget https://github.com/IamDH4/ttf-wps-fonts/archive/master.zip
        eval sudo dpkg -i wps-office_10.1.0.6757_amd64.deb
        eval sudo rm wps-office_10.1.0.6757_amd64.deb
        eval unzip master.zip
        eval cd ttf-wps-fonts-master
        eval sudo ./install.sh
        eval cd
        eval sudo rm -rf ttf-wps-fonts-master
        eval sudo rm master.zip
        }
    woeIns () {
        clear
        echo "Installing WoeUsb..."
        sleep 1
        nam=software-properties-common
        promptDialog
        sudo add-apt-repository ppa:nilarimogard/webupd8 -y
        sudo apt update -y
        sudo apt install woeusb -y
        }
    tweakIns () { #Elementary-tweaks
        sleep 0.5
        echo 'Installing elementary tweaks...'
        nam=software-properties-common
        promptDialog
        eval sudo add-apt-repository -y ppa:philip.scott/elementary-tweaks
        eval sudo apt update
        eval sudo apt install elementary-tweaks -y
        }
    adIns () {  #0AD
        sleep 0.5
        echo 'Installing 0ad from 0ad repository... This will take a while, please be patient...'
        nam=software-properties-common
        promptDialog
        eval sudo add-apt-repository -y ppa:wfg/0ad
        eval sudo apt-get update
        eval sudo apt-get install 0ad -y
        }
    rebooter () {   #Rebboot confirmation
        clear
        if (whiptail --title "Reboot" --yesno "Do you really want to reboot?" 8 78); then
            systemctl reboot
        else
            echo "Ok, system won't reboot now."
            sleep 1
            clear
            no1
        fi
        }
    updater () {    #Update system
    	if [[ $distro == Arch ]];then
            echo 'Updating system...'
		    eval sudo pacman -Syuq --noconfirm
		    echo 'Done!'
        else
            echo 'Updating system...'
		    eval sudo apt full-upgrade -y
		    echo 'Done!'
        fi
        }
    esEggs () {
		        #Multichoice menu (Eastereggs)
		        cmd=(whiptail --title "Welcome "$USER"!" --menu "Choose your Linux distribution:" 20 80 10)
				options=(1 "cmatrix"    # Selection menu 3.5 using 'whiptail'
								     2 "sl"
								     3 "boxes"
								     4 "Check the weather from terminal"
								     5 "Download (non-copyright only) videos from youtube with your terminal"
								     6 "Play Sudoku in terminal"
								     7 "Text to ASCII in terminal"
								     8 "Make your terminal fancy!"
								     9 "There are animals in the terminal!")
				choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
				clear
				case $choices in
					1)
                        nam=cmatrix
                        promptDialog
                        cmatrix
                        esEggs
                        ;;
                    2)
                        nam=sl
                        promptDialog
                        sl
                        esEggs
                        ;;
                    3)
                        nam=boxes
                        promptDialog
                        clear
                        echo "I am a dog :D" | boxes -d dog -a c
                        echo ""
                        read -p "Press enter to continue..."
                        esEggs
                        ;;
                    4)
                        clear
                        curl wttr.in
                        echo ""
                        read -p "Press enter to continue..."
                        esEggs
                        ;;
                    5)
                        nam=youtube-dl
                        promptDialog
                        esEggs
                        ;;
                    6)
                        nam=nudoku
                        promptDialog
                        nudoku
                        esEggs
                        ;;
                    7)
                        nam=figlet
                        promptDialog
                        clear
                        read -p "Write here something: " userText   
                        echo $userText | figlet
                        echo ""
                        read -p "Press enter to continue..."
                        esEggs
                        ;;
                    8)
                        nam=lolcat
                        promptDialog
                        clear
                        echo ">>>>>>>>>>>>>>>>>>>>>>> It's so colorful!! <<<<<<<<<<<<<<<<<<<<<<<<" | lolcat
                        echo ""
                        read -p "Press enter to continue..." | lolcat
                        esEggs
                        ;;
                    9)
                        nam=cowsay
                        promptDialog
                        clear
                        cowsay -f dragon "Run for cover, I feel a sneeze coming on!"
                        echo ""
                        read -p "Press enter to continue..."
                        esEggs
                        ;;
                esac
           }
    allArch () {
    	if (whiptail --title "Install all" --yesno "Do you really want to install all packages?" 8 78); then
            whiptail --title "These operations would take effect (Press Esc to abort) : " --msgbox "snapd libreoffice git python3 python3-setuptools python3-gi python-gobject python3-pip mesa-utils wine-stable software-properties-common steam-installer virtualbox gparted dconf-editor ubuntu-restricted-extras libavcodec-extra flashplugin-installer pepperflashplugin-nonfree unace rar unrar p7zip-rar p7zip sharutils uudeview mpack arj cabextract lzip lunzip audacity deja-dup screenfetch apt-fast opera-stable gestures timeshift 0ad wpsoffice woeusb || update & restart" 15 85
            sudo pacman -Syuq --noconfirm
            sudo pacman -Sq --noconfirm libreoffice-fresh-en_gb wine steam steam-native-runtime git mesa-demos etcher opera opera-ffmpeg-codecs virtualbox gparted dconf-editor wavpack flashplugin unace unrar p7zip sharutils uudeview arj cabextract lzip audacity deja-dup screenfetch 0ad
            sudo pakku -Sq --noconfirm snapd python3 gestures libinput-gestures timeshift wps-office woeusb
            sudo systemctl enable --now snapd.socket
            sudo ln -s /var/lib/snapd/snap /snap
            sudo snap install skype vscode --classic
            updater
            rebooter
        else
            echo "Ok, going back to home..."
            sleep 1
            clear
            no1
        fi
        }
    all () {
        if (whiptail --title "Install all" --yesno "Do you really want to install all packages?" 8 78); then
            whiptail --title "These operations would take effect (Press Esc to abort) : " --msgbox "snapd libreoffice git python3 python3-setuptools python3-gi python-gobject python3-pip mesa-utils wine-stable software-properties-common steam-installer virtualbox gparted dconf-editor ubuntu-restricted-extras libavcodec-extra flashplugin-installer pepperflashplugin-nonfree unace rar unrar p7zip-rar p7zip sharutils uudeview mpack arj cabextract lzip lunzip audacity deja-dup screenfetch apt-fast opera-stable gestures timeshift 0ad wpsoffice woeusb || update & restart" 15 85
            sudo apt install snapd libreoffice libreoffice-gtk* git python3 python3-setuptools python3-gi python-gobject python3-pip mesa-utils wine-stable software-properties-common steam-installer virtualbox gparted dconf-editor ubuntu-restricted-extras libavcodec-extra flashplugin-installer pepperflashplugin-nonfree unace rar unrar p7zip-rar p7zip sharutils uudeview mpack arj cabextract lzip lunzip audacity deja-dup screenfetch -y
            sudo snap install skype vscode --classic
            aptFast
            operaInstall
            gesturesSetup
            timsIns
            adIns
            wpsInstall
            woeIns
            updater
            rebooter
        else
            echo "Ok, going back to home..."
            sleep 1
            clear
            no1
        fi
        }
    adv () {
                #Multichoice menu (selection)
                cmd=(whiptail --title "Selection menu" --separate-output --checklist "Select options:" 30 60 20)
                options=(1 "Snapd" off    # Selection menu 3.5 using 'whiptail'
                         2 "Libreoffice" off
                         3 "Git" off
                         4 "python3" off
                         5 "mesa utils" off
                         6 "Wine" off
                         7 "Etcher" off
                         8 "Opera browser" off
                         9 "Steam" off
                         10 "Virtualbox" off
                         11 "GParted" off
                         12 "Dconf Editor" off
                         13 "Additional audio codecs" off
                         14 "Flash player support for browsers" off
                         15 "Archive management tools" off
                         16 "Audacity" off
                         17 "Déja dup" off
                         18 "Touchpad gestures" off
                         19 "Skype" off
                         20 "Visualstudio Code" off
                         21 "Screenfetch" off
                         22 "Timeshift" off
                         23 "$misc" off
                         24 "WPS Office" off
                         25 "WoeUSB" off
                         26 "0 A.D." off
                         27 "Powertop" off
                         98 "Upgrade system" off
                         99 "Reboot after operation" off)
                choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
                clear
                for choice in $choices
                do
                    case $choice in
                        1)
                            snapIns
                            ;;
                        2)
                        	if [[ $distro == Arch ]];then
                        		nam=libreoffice-fresh-en_gb
                        		sch
                        	else
                            	nam='libreoffice'
                            fi
                            promptDialog
                            ;;
                        3)
                            nam=git
                            promptDialog
                            ;;
                        4)
                        	if [[ $distro == Arch ]];then
                        		nam=python3
                        	else
                            	nam='python3 python3-setuptools python3-gi python-gobject python3-pip'
                            fi
                            promptDialog
                            ;;
                        5)
                        	if [[ $distro == Arch ]];then
                        		nam=mesa-demos
                        	else
                            	nam=mesa-utils
                            fi
                            promptDialog
                            ;;
                        6)
                        	if [[ $distro == Arch ]];then
                        		nam=wine
                        	else
                            	nam="wine-stable wine32 wine64"
                            fi
                            promptDialog
                            ;;
                        7)
                        	if [[ $distro == Arch ]];then
                        		nam=etcher
                        		promptDialog
                        	else
                            	nam=etcher
                            	promptDialogSpec
                            fi
                            ;;
                        8)
                        	if [[ $distro == Arch ]];then
                        		nam="opera opera-ffmpeg-codecs"
                        		promptDialog
                        	else
                            	nam=operaInstall
                            	promptDialogSpec
                            fi
                            ;;
                        9)
                        	if [[ $distro == Arch ]];then
                        		nam="steam steam-native-runtime"
                        	else
                            	nam=steam-installer
                            fi
                            promptDialog
                            ;;
                        10)
                            nam=virtualbox
                            promptDialog
                            ;;
                        11)
                            nam=gparted
                            promptDialog
                            ;;
                        12)
                            nam=dconf-editor
                            promptDialog
                            ;;
                        13)
                        	if [[ $distro == Arch ]];then
                        		nam=wavpack
                        	else
                            	nam='ubuntu-restricted-extras libavcodec-extra'
                            fi
                            promptDialog
                            ;;
                        14)
                        	if [[ $distro == Arch ]];then
                        		nam=flashplugin
                        	else
                            	nam='flashplugin-installer pepperflashplugin-nonfree'
                            fi
                            promptDialog
                            ;;
                        15)
                        	if [[ $distro == Arch ]];then
                        		nam="unace unrar p7zip sharutils uudeview arj cabextract lzip"
                        	else
                            	nam='unace rar unrar p7zip-rar p7zip sharutils uudeview mpack arj cabextract lzip lunzip'
                            fi
                            promptDialog
                            ;;
                        16)
                            nam=audacity
                            promptDialog
                            ;;
                        17)
                            nam=deja-dup
                            promptDialog
                            ;;
                        18)
                        	if [[ $distro == Arch ]];then
                        		nam="gestures libinput-gestures"
                        		promptDialog
                        	else
                            	nam=gesturesSetup
                            	promptDialogSpec
                            fi
                            ;;
                        19)
                            nam=skype
                            promptDialog
                            ;;
                        20)
                            nam=vscode
                            promptDialog
                            ;;
                        21)
                            nam=screenfetch
                            promptDialog
                            ;;
                        22)
                        	if [[ $distro == Arch ]];then
                        		nam=timeshift
                        		promptDialog
                        	else
                            	nam=timsIns
                            	promptDialogSpec
                            fi
                            ;;
                        23)
                        	if [[ $distro == Arch ]];then
                        		pakkuIns
                        	else
                            	nam=aptFast
                            	promptDialogSpec
                            fi
                            ;;
                        24)
                        	if [[ $distro == Arch ]];then
                        		nam=wps-office
                        		promptDialog
                        	else
                            	nam=wpsInstall
                            	promptDialogSpec
                            fi
                            ;;
                        25)
                        	if [[ $distro == Arch ]];then
                        		nam=woeusb
                        		promptDialog
                        	else
                            	nam=woeIns
                            	promptDialogSpec
                            fi
                            ;;
                        26)
                        	if [[ $distro == Arch ]];then
                        		nam=0ad
                        		promptDialog
                        	else
                            	nam=adIns
                            	promptDialogSpec
                            fi
                            ;;
                        27)
                        	if [[ $distro == Arch ]];then
                        		nam=powertop
                        		promptDialog
                        		read -p "Configuring powertop. This will take a while... Don't let your PC to go to sleep! Press enter when ready..."
								sudo powertop -c
								sudo powertop --auto-tune
								clear
								echo "Ready!"
								sleep 1
								clear
                        	else
                            	nam=powins
                            	promptDialogSpec
                            fi
                            ;;
                        98)
                            updater
                            ;;
                        99)
                            rebooter
                            ;;
                    esac
                done
                no1
                }
    about () {
                #About screen
                dialog --title "About" --msgbox "       

                Version "$version"

                Dániel Kolozsi
                
                Github: <https://github.com/swanux/helen>

 ================================================================================

          Copyright (C) [2019] [Dániel Kolozsi]

          This program is free software: you can redistribute it and/or modify
          it under the terms of the GNU General Public License as published by
          the Free Software Foundation, either version 3 of the License, or
          (at your option) any later version.

          This program is distributed in the hope that it will be useful,
          but WITHOUT ANY WARRANTY; without even the implied warranty of
          MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
          GNU General Public License for more details.

          You should have received a copy of the GNU General Public License
          along with this program.  If not, see <https://www.gnu.org/licenses/>.

 ================================================================================

          Changes (09.04.2019):

              ~ Fixed bugs
              ~ Added new packages
              " 160 85
                clear
                if [[ $started == false ]]
                then
                	osSec
               	else
               		no1
               	fi
                }
    fbacks () {
        dialog --title "Attention!" --msgbox "This operation will open a Github© link in your default browser. Press Esc to abort." 8 40
        clear
        xdg-open 'https://github.com/swanux/helen/issues/new/choose'
        clear
        no1
        }
#Selection menu No. 1
no1 () {
	started=true
    CMD=(whiptail --title "Welcome "$USER"!" --menu "Choose one of the following options:" 15 40 5)
    OPTIONS=(1 "Install everything (Simple)"
             2 "Select what to install (Advanced)"
             3 "Easter eggs selection"
             4 "About"
             5 "Request new feature or report bug")
    CHOICES=$("${CMD[@]}" "${OPTIONS[@]}" 2>&1 >/dev/tty)
    clear
    case $CHOICES in
            1)
                all
                ;;
            2)
            	adv
                ;;
            3)
                esEggs
                ;;
            4)
                about
                ;;
            5)
                fbacks
                ;;
    esac
    }
osSec () {
	CONF=(whiptail --title "Welcome "$USER"!" --menu "Choose your Linux distribution:" 15 40 5)
    OPTS=(1 "Arch (or based on it)"
          2 "Debian (or based on it)")
    CHS=$("${CONF[@]}" "${OPTS[@]}" 2>&1 >/dev/tty)
    clear
    case $CHS in
            1)
            	distro=Arch
            	echo 'distrodoneA' >> .config/helen_config.txt
            	misc="Pakku (AUR helper)"
            	Str=exRep
            	StrCm=exRep
            	doIt=:
            	chkStr
            	Str=compatible
            	StrCm=depChk
            	doIt=:
            	chkStr
            	no1
                ;;
            2)
            	distro=Ubuntu
            	echo 'distrodoneU' >> .config/helen_config.txt
            	misc="Apt-fast"
                depChk
                no1
                ;;
    esac
    }
if grep -q 'distrodoneA' ".config/helen_config.txt"; then
	distro=Arch
	misc="Pakku (AUR helper)"
	no1
elif grep -q 'distrodoneU' ".config/helen_config.txt"; then
	distro=Arch
	misc="Apt-fast"
	no1
else
	osSec
fi

#!/bin/bash +e
cd
date="06.26.2019"
version="v0.2.9"
export $version
if grep -q "updated" ~/.config/helen_config.txt; then
	updated=true
	sed -i "/\b\updated\b/d" ~/.config/helen_config.txt
else
	updated=false
fi
wexit () {
    exec 3>&1
    result=$(dialog --yesno "Do you really would like to exit the program?" 5 55 2>&1 1>&3);
    response=$?
    case $response in
       0) clear && exit;;
       1) eval $cmback;;
    esac
}
updaterR () {
	cd
	clear
	git clone https://github.com/swanux/helen
	if grep -q $version ~/helen/Helen; then
		rm -rf helen
		clear
	    dialog --msgbox "You are up to date." 20 20
	    clear
	    no1
	else
		exec 3>&1
		result=$(dialog --yesno "Update avilable! Would you like to update now?" 5 55 2>&1 1>&3);
		response=$?
		case $response in
		   0) 	chmod +x helen/Helen
		   		rm -rf Helen
		   		cp ~/helen/Helen $PWD
		   		if [[ $iVr == "Remove Helen" ]]; then
		   			rm -rf ~/.config/Helen
		   			cp ~/helen/Helen ~/.config/
		   		fi
		   		echo "updated" >> ~/.config/helen_config.txt
		   		rm -rf ~/helen/
		   		clear
		   		dialog --msgbox "Helen updated succesfully! Now just rerun Helen to enjoy it." 15 25 #heigth - width
		   		clear
		   		exit
		   		;;
		   1) 	rm -rf helen
		   		clear
		   		no1
		   		;;
		esac
	fi
}
sch () {
	if [[ $distro == Ubuntu ]]
	then
		if [[ $nam == skype || $nam == vscode ]]
		then
			what=snap
		else
			what=apt
		fi
	else
		if [[ $nam == skype || $nam == vscode ]]
		then
			what=snap
		elif [[ $nam == snapd || $nam == python3 || $nam == "gestures libinput-gestures" || $nam == timeshift || $nam == wps-office || $nam == woeusb || $nam == boxes || $nam == nudoku ]]
		then
			what=pakku
		else
			what=pacman
		fi
	fi
	}
#Going to Home and declaring variables
chkStr () {
	if grep -q $Str ".config/helen_config.txt"; then
	    $doIt
	else
		eval $StrCm
		clear
	fi
	}
cd
snapt=no
pakkut=yes
Str='pakkut=yes'
StrCm='pakkut=no'
doIt=:
chkStr
nam=""
name=""
what=apt
sleep 0.1
clear
#Set title
mytitle=$version
echo -e '\033]2;'$mytitle'\007'
#Checking requirements
chkarch () {
	if pacman -Qi $name > /dev/null ; then
	  echo "Ok. Package $name is installed."
	  telepite=n
	else
	  echo "The package $name is not installed. Installing "$name"..."
	  nam=$name
	  sleep 0.1
	  if [[ $nam == 0ad && $distro == Ubuntu ]]; then
	  	:
	  else
	  	promptDialog
	  fi
	  telepite=y
	  clear
	fi
}
chkdeb () {
    PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $name|grep "install ok installed")
    echo "Checking for "$name": " $PKG_OK
    if [ "" == "$PKG_OK" ]; then
        echo "No "$name". Setting up "$name"..."
        nam=$name
        sleep 0.1
        if [[ $nam == 0ad && $distro == Ubuntu ]]; then
	  		:
	  	else
	  		promptDialog
	  	fi
	  	telepite=y
        clear
    else
        echo $name" is installed already."
        sleep 0.1
        telepite=n
    fi
}
#Check if package is installed or not for esEggs or sth like that...
eCs () {
	if [[ $distro == Ubuntu ]]; then
		chkdeb
	elif [[ $distro == Arch ]]; then
		chkarch
	else
		echo "Error 1"
		break
	fi
}
depChk () {
		if [[ $distro == Ubuntu ]]
		then
			name=xdg-utils
			chkdeb
			name=dialog
			chkdeb
			name=dialog
			chkdeb
			name=software-properties-common
			chkdeb
			name=git
			chkdeb
			name=wget
			chkdeb
			echo "compatible" > .config/helen_config.txt
			cd
		else
			name=wmctrl
			chkarch
			name=pakku
			if pacman -Qi $name > /dev/null ; then
				echo 'pakkut=yes' >> .config/helen_config.txt
				pakkut=yes
			fi
			name=xdg-utils
			chkarch
			name=dialog
			chkarch
			name=git
			chkarch
			name=wget
			chkarch
			echo "compatibleArch" >> .config/helen_config.txt
			cd
		fi
	}
    promptDialogSpec () {   #Feedback for user (for func.s)
        clear
        $nam
        clear
        echo 'Done!'
        sleep 1.5
        }
    pakkuIns () {
    	clear
        echo "Setting up pakku..."
        sleep 1
        git clone https://aur.archlinux.org/pakku.git
        cd pakku
        makepkg -si
        rm -rf pakku
        echo "Done!"
        sleep 1
        clear
       }
    powins () {
    	echo "Installing powertop..."
    	sleep 1
    	name=powertop
    	eCs
    	if [[ $telepite == y ]]; then
			sudo add-apt-repository ppa:eugenesan/ppa
			sudo apt update
			sudo apt install powertop
			clear
			dialog --msgbox "Configuring powertop. This will take a while... Don't let your PC to go to sleep! Press enter when ready..." 20 40
			clear
			sudo powertop -c
			sudo powertop --auto-tune
			clear
			echo "Ready!"
			sleep 1
		fi
    	clear
    }
    promptDialog () {   #Same.. Just for single apps from repo or snap
        clear
        sch
	    if [[ $what == "snap" && $snapt == "no" ]]
		then
			if (dialog --title "Snapd is required!" --yesno "Snapd is required for "$nam". Would you like to install it? If you select no you'll be redirected to the program selection page." 10 80); then
				namtmp=$nam
				snapIns
		        nam=$namtmp
		        echo 'Working on '$nam'...'
				sleep 1
				eval sudo $what install $nam --classic
				clear
				echo 'Done!'
				sleep 1
				clear
			else
		    	adv
		    fi
		elif [[ $what == "snap" && $snapt == yes ]]
		then
			echo 'Working on '$nam'...'
			sleep 1
		    eval sudo $what install $nam --classic
		    clear
		    echo 'Done!'
		    sleep 1
		    clear
		elif [[ $what == pacman ]]
		then
			echo 'Working on '$nam'...'
			sleep 1
		    eval sudo $what -Sq --noconfirm $nam
		    clear
		    echo 'Done!'
		    sleep 1
		    clear
		elif [[ $what == pakku && $pakkut == no ]]
		then
			if (dialog --title "Pakku is required!" --yesno "Pakku is required for "$nam". Would you like to install it? If you select no you'll be redirected to the homepage." 10 80); then
				pakkuIns
		        echo 'Working on '$nam'...'
				sleep 1
				eval sudo $what -Sq --noconfirm $nam
				clear
				echo 'Done!'
				sleep 1
				clear
			else
		    	no1
		    fi
		elif [[ $what == pakku && $pakkut == yes ]]
		then
			echo 'Working on '$nam'...'
			sleep 1
		    eval sudo $what -Sq --noconfirm $nam
		    clear
		    echo 'Done!'
		    sleep 1
		    clear
        else
            echo 'Working on '$nam'...'
            sleep 1
		    eval sudo $what install $nam -y
		    clear
		    echo 'Done!'
		    sleep 1
		    clear
		fi
		sleep 1.5
        }
    snapIns () {
    	name=snapd
    	eCs
        snapt=yes
        if [[ $distro == Arch ]];then
   		sudo systemctl enable --now snapd.socket
        sudo ln -s /var/lib/snapd/snap /snap
        fi
       }
    timsIns () {    #Timeshift
        sleep 0.5
        echo 'Installing timeshift...'
        name=software-properties-common
        eCs
        eval sudo add-apt-repository -y ppa:teejee2008/ppa
        eval sudo apt update
        name=timeshift
		eCs
        }
    etcher () {
    	cd
		name=balena-etcher-electron
		eCs
		if [[ $telepite == y ]]; then
			sudo echo "deb https://deb.etcher.io stable etcher" | sudo tee /etc/apt/sources.list.d/balena-etcher.list
			sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 379CE192D401AB61
			sudo apt-get update
		fi
    	}
    exRep () {
    	echo '[multilib]' | sudo tee -a /etc/pacman.conf
    	echo 'Include = /etc/pacman.d/mirrorlist' | sudo tee -a /etc/pacman.conf
    	echo 'exRep' >> .config/helen_config.txt
        }
    aptFast () {    #Apt-fast
        sleep 0.5
        echo 'Installing apt-fast...'
        name=software-properties-common
        eCs
        name=apt-fast
        eCs
        if [[ $telepite == y ]]; then
		    eval sudo add-apt-repository -y ppa:apt-fast/stable
		    eval sudo apt update
        	promptDialog
        fi
        }
    operaInstall () {   #Opera
    	name=opera
    	eCs
    	if [[ $telepite == y ]]; then
		    echo 'Installing Opera from Opera website...'
		    eval wget https://download1.operacdn.com/pub/opera/desktop/60.0.3255.170/linux/opera-stable_60.0.3255.170_amd64.deb
		    eval sudo dpkg -i opera-stable_60.0.3255.170_amd64.deb
		    eval sudo apt update
		    eval sudo rm opera-stable_60.0.3255.170_amd64.deb
		fi
        }
    gesturesSetup () {  #Libinput gestures + GUI + xdotool
        name=xdotool
        eCs
        name=wmctrl
        eCs
        name=libinput-tools
        eCs
        echo 'Setting input permisson for gestures...'
        eval sudo gpasswd -a $USER input
        dialog --msgbox 'ATTENTION!! You need to reboot to apply this operation!' 15 10
        sleep 1
        echo 'Cloning libinput gestures and gestures GUI from github...'
        eval git clone https://github.com/bulletmark/libinput-gestures.git
        eval git clone https://gitlab.com/cunidev/gestures
        echo 'Done!'
        echo 'Building packages...'
        eval cd libinput-gestures
        eval sudo ./libinput-gestures-setup install
        eval cd
        eval cd gestures
        eval sudo python3 setup.py install
        eval cd
        eval sudo rm -rf libinput-gestures
        eval sudo rm -rf gestures
        }
    wpsInstall () { #WPS office
    	name=wps
    	eCs
    	if [[ $telepite == y ]]; then
		    echo 'Downloading and installing WPS Office and WPS Office symbols (it takes around 7 min)...'
		    eval wget http://kdl.cc.ksosoft.com/wps-community/download/8392/wps-office_11.1.0.8392_amd64.deb
		    eval wget https://github.com/IamDH4/ttf-wps-fonts/archive/master.zip
		    eval sudo dpkg -i wps-office_11.1.0.8392_amd64.deb
		    eval sudo rm wps-office_11.1.0.8392_amd64.deb
		    eval unzip master.zip
		    eval cd ttf-wps-fonts-master
		    eval sudo ./install.sh
		    eval cd
		    eval sudo rm -rf ttf-wps-fonts-master
		    eval sudo rm master.zip
		fi
        }
    woeIns () {
        clear
        echo "Installing WoeUsb..."
        sleep 1
        name=software-properties-common
        eCs
        name=woeusb
        eCs
        if [[ $telepite == y ]]; then
		    sudo add-apt-repository ppa:nilarimogard/webupd8 -y
		    sudo apt update -y
		    sudo apt install woeusb -y
        fi
        }
    tweakIns () { #Elementary-tweaks
        sleep 0.5
        echo 'Installing elementary tweaks...'
        name=software-properties-common
        eCs
        eval sudo add-apt-repository -y ppa:philip.scott/elementary-tweaks
        eval sudo apt update
        eval sudo apt install elementary-tweaks -y
        }
    adIns () {  #0AD
        sleep 0.5
        echo 'Installing 0ad from 0ad repository... This will take a while, please be patient...'
        name=software-properties-common
        eCs
        name=0ad
        eCs
        if [[ $telepite == y ]]; then
		    eval sudo add-apt-repository -y ppa:wfg/0ad
		    eval sudo apt-get update
		    eval sudo apt-get install 0ad -y
		fi
        }
    rebooter () {   #Rebboot confirmation
        clear
        if (dialog --title "Reboot" --yesno "Do you really want to reboot?" 8 78); then
            systemctl reboot
        else
            echo "Ok, system won't reboot now."
            sleep 1
            clear
            no1
        fi
        }
    updater () {    #Update system
    	if [[ $distro == Arch ]];then
            echo 'Updating system...'
		    eval sudo pacman -Syuq --noconfirm
		    echo 'Done!'
        else
            echo 'Updating system...'
		    eval sudo apt full-upgrade -y
		    echo 'Done!'
        fi
        }
    esEggs () {
		        #Multichoice menu (Eastereggs)
		        exec 3>&1
                result=$(dialog --menu "Choose an EasterEgg :" 20 80 10 \
                        "1"     "cmatrix - Knock knock Neo..." \
                       "2"       "sl - Locomotive in the console" \
                       "3"       "boxes - Graffiti on your virtual wall" \
                       "4"       "Check the weather from terminal" \
                       "5"       "Download videos from youtube" \
                       "6"       "Play Sudoku in terminal" \
                       "7"       "Text to ASCII in terminal" \
                       "8"       "Make your terminal fancy!" \
                       "9"       "There are animals in the terminal!" 2>&1 1>&3);               # Selection menu 4.0 using 'dialog'
                response=$?
                case $response in
                   1) no1;;
                esac
                case $result in
                    1)
                        name=cmatrix
                        eCs
                        cmatrix
                        esEggs
                        ;;
                    2)
                        name=sl
                        eCs
                        sl
                        esEggs
                        ;;
                    3)
                        name=boxes
                        eCs
                        clear
                        echo "I am a dog :D" | boxes -d dog -a c
                        echo ""
                        read -p "Press enter to continue..."
                        esEggs
                        ;;
                    4)
                        clear
                        curl wttr.in
                        echo ""
                        read -p "Press enter to continue..."
                        esEggs
                        ;;
                    5)
                        name=youtube-dl
                        eCs
                        esEggs
                        ;;
                    6)
                        name=nudoku
                        eCs
                        nudoku
                        esEggs
                        ;;
                    7)
                        name=figlet
                        eCs
                        clear
                        read -p "Write here something: " userText   
                        echo $userText | figlet
                        echo ""
                        read -p "Press enter to continue..."
                        esEggs
                        ;;
                    8)
                        name=lolcat
                        eCs
                        clear
                        echo ">>>>>>>>>>>>>>>>>>>>>>> It's so colorful!! <<<<<<<<<<<<<<<<<<<<<<<<" | lolcat
                        echo ""
                        read -p "Press enter to continue..." | lolcat
                        esEggs
                        ;;
                    9)
                        name=cowsay
                        eCs
                        clear
                        cowsay -f dragon "Run for cover, I feel a sneeze coming on!"
                        echo ""
                        read -p "Press enter to continue..."
                        esEggs
                        ;;
                esac
           }
    allArch () {
    	if (dialog --title "Install all" --yesno "Do you really want to install all packages?" 8 78); then
            dialog --title "These operations would take effect (Press Esc to abort) : " --msgbox "snapd libreoffice git python3 python3-setuptools python3-gi python-gobject python3-pip mesa-utils wine-stable software-properties-common steam-installer virtualbox gparted dconf-editor ubuntu-restricted-extras libavcodec-extra flashplugin-installer pepperflashplugin-nonfree unace rar unrar p7zip-rar p7zip sharutils uudeview mpack arj cabextract lzip lunzip audacity deja-dup screenfetch apt-fast opera-stable gestures timeshift 0ad wpsoffice woeusb || update & restart" 15 85
            sudo pacman -Syuq --noconfirm
            sudo pacman -Sq --noconfirm libreoffice-fresh-en_gb wine steam steam-native-runtime git mesa-demos etcher opera opera-ffmpeg-codecs virtualbox gparted dconf-editor wavpack flashplugin unace unrar p7zip sharutils uudeview arj cabextract lzip audacity deja-dup screenfetch 0ad
            sudo pakku -Sq --noconfirm snapd python3 gestures libinput-gestures timeshift wps-office woeusb
            sudo systemctl enable --now snapd.socket
            sudo ln -s /var/lib/snapd/snap /snap
            sudo snap install skype vscode --classic
            updater
            rebooter
        else
            echo "Ok, going back to home..."
            sleep 1
            clear
            no1
        fi
        }
    all () {
        if (dialog --title "Install all" --yesno "Do you really want to install all packages?" 8 78); then
            dialog --title "These operations would take effect (Press Esc to abort) : " --msgbox "snapd libreoffice git python3 python3-setuptools python3-gi python-gobject python3-pip mesa-utils wine-stable software-properties-common steam-installer virtualbox gparted dconf-editor ubuntu-restricted-extras libavcodec-extra flashplugin-installer pepperflashplugin-nonfree unace rar unrar p7zip-rar p7zip sharutils uudeview mpack arj cabextract lzip lunzip audacity deja-dup screenfetch apt-fast opera-stable gestures timeshift 0ad wpsoffice woeusb || update & restart" 15 85
            sudo apt install snapd libreoffice libreoffice-gtk* git python3 python3-setuptools python3-gi python-gobject python3-pip mesa-utils wine-stable software-properties-common steam-installer virtualbox gparted dconf-editor ubuntu-restricted-extras libavcodec-extra flashplugin-installer pepperflashplugin-nonfree unace rar unrar p7zip-rar p7zip sharutils uudeview mpack arj cabextract lzip lunzip audacity deja-dup screenfetch -y
            sudo snap install skype vscode --classic
            aptFast
            operaInstall
            gesturesSetup
            timsIns
            adIns
            wpsInstall
            woeIns
            updater
            rebooter
        else
            echo "Ok, going back to home..."
            sleep 1
            clear
            no1
        fi
        }
adv () {
#Multichoice menu (selection)
cmd=(dialog --title "Selection menu" --separate-output --checklist "Select options:" 30 60 20)
options=(1 "Snapd" off    # Selection menu 3.6 using 'dialog'
         2 "Libreoffice" off
         3 "Git" off
         4 "python3" off
         5 "mesa utils" off
         6 "Wine" off
         7 "Etcher" off
         8 "Opera browser" off
         9 "Steam" off
         10 "Virtualbox" off
         11 "GParted" off
         12 "Dconf Editor" off
         13 "Additional audio codecs" off
         14 "Flash player support for browsers" off
         15 "Archive management tools" off
         16 "Audacity" off
         17 "Déja dup" off
         18 "Touchpad gestures" off
         19 "Skype" off
         20 "Visualstudio Code" off
         21 "Screenfetch" off
         22 "Timeshift" off
         23 "$misc" off
         24 "WPS Office" off
         25 "WoeUSB" off
         26 "0 A.D." off
         27 "Powertop" off
         98 "Upgrade system" off
         99 "Reboot after operation" off)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            snapIns
            ;;
        2)
        	if [[ $distro == Arch ]];then
        		name=libreoffice-fresh-en_gb
        	else
            	name='libreoffice'
            fi
            eCs
            ;;
        3)
            name=git
            eCs
            ;;
        4)
        	if [[ $distro == Arch ]];then
        		name=python3
        		eCs
        	else
            	name=python3
            	eCs
            	name=python3-setuptools
            	eCs
            	name=python3-gi
            	eCs
            	name=python-gobject
            	eCs
            	name=python3-pip
            	eCs
            fi
            ;;
        5)
        	if [[ $distro == Arch ]];then
        		name=mesa-demos
        	else
            	name=mesa-utils
            fi
            eCs
            ;;
        6)
        	if [[ $distro == Arch ]];then
        		name=wine
        		eCs
        	else
            	name=wine-stable
            	eCs
            	name=wine32
            	eCs
            	name=wine64
            	eCs
            fi
            ;;
        7)
        	if [[ $distro == Arch ]];then
        		name=etcher
        		eCs
        	else
            	nam=etcher
            	promptDialogSpec
            fi
            ;;
        8)
        	if [[ $distro == Arch ]];then
        		name=opera
        		eCs
        		name=opera-ffmpeg-codecs
        		eCs
        	else
            	nam=operaInstall
            	promptDialogSpec
            fi
            ;;
        9)
        	if [[ $distro == Arch ]];then
        		name=steam
        		eCs
        		name=steam-native-runtime
        		eCs
        	else
            	name=steam-installer
            	eCs
            fi
            ;;
        10)
            name=virtualbox
            eCs
            ;;
        11)
            name=gparted
            eCs
            ;;
        12)
            name=dconf-editor
            eCs
            ;;
        13)
        	if [[ $distro == Arch ]];then
        		name=wavpack
        		eCs
        	else
            	name=ubuntu-restricted-extras
            	eCs
            	name=libavcodec-extra
            	eCs
            fi
            ;;
        14)
        	if [[ $distro == Arch ]];then
        		nam=flashplugin
        	else
            	nam='flashplugin-installer pepperflashplugin-nonfree'
            fi
            promptDialog
            ;;
        15)
        	if [[ $distro == Arch ]];then
        		nam="unace unrar p7zip sharutils uudeview arj cabextract lzip"
        	else
            	nam='unace rar unrar p7zip-rar p7zip sharutils uudeview mpack arj cabextract lzip lunzip'
            fi
            promptDialog
            ;;
        16)
            name=audacity
            eCs
            ;;
        17)
            name=deja-dup
            eCs
            ;;
        18)
        	if [[ $distro == Arch ]];then
        		name=gestures
        		eCs
        		name=libinput-gestures
        		eCs
        	else
            	nam=gesturesSetup
            	promptDialogSpec
            fi
            ;;
        19)
            name=skype
            eCs
            ;;
        20)
            name=vscode
            eCs
            ;;
        21)
            name=screenfetch
            eCs
            ;;
        22)
        	if [[ $distro == Arch ]];then
        		name=timeshift
        		eCs
        	else
            	nam=timsIns
            	promptDialogSpec
            fi
            ;;
        23)
        	if [[ $distro == Arch ]];then
        		pakkuIns
        	else
            	nam=aptFast
            	promptDialogSpec
            fi
            ;;
        24)
        	if [[ $distro == Arch ]];then
        		name=wps-office
        		eCs
        	else
            	nam=wpsInstall
            	promptDialogSpec
            fi
            ;;
        25)
        	if [[ $distro == Arch ]];then
        		name=woeusb
        		eCs
        	else
            	nam=woeIns
            	promptDialogSpec
            fi
            ;;
        26)
        	if [[ $distro == Arch ]];then
        		name=0ad
        		eCs
        	else
            	nam=adIns
            	promptDialogSpec
            fi
            ;;
        27)
        	if [[ $distro == Arch ]];then
        		name=powertop
        		eCs
        		if [[ $telepite == y ]]; then
		    		read -p "Configuring powertop. This will take a while... Don't let your PC to go to sleep! Press enter when ready..."
					sudo powertop -c
					sudo powertop --auto-tune
					clear
					echo "Ready!"
					sleep 1
				fi
				clear
        	else
            	nam=powins
            	promptDialogSpec
            fi
            ;;
        98)
            updater
            ;;
        99)
            rebooter
            ;;
    esac
done
no1
}
    about () {
                #About screen
                dialog --title "About" --msgbox "       

                Version "$version"

                Dániel Kolozsi
                
                Github: <https://github.com/swanux/helen>

 ================================================================================

          Copyright (C) [2019] [Dániel Kolozsi]

          This program is free software: you can redistribute it and/or modify
          it under the terms of the GNU General Public License as published by
          the Free Software Foundation, either version 3 of the License, or
          (at your option) any later version.

          This program is distributed in the hope that it will be useful,
          but WITHOUT ANY WARRANTY; without even the implied warranty of
          MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
          GNU General Public License for more details.

          You should have received a copy of the GNU General Public License
          along with this program.  If not, see <https://www.gnu.org/licenses/>.

 ================================================================================

          Changes ($date):

              ~ Fixed bugs
              ~ Optimized performance
              ~ Updated installer
              ~ Added built in updater
              ~ Fixed stability issues
              " 160 85
                clear
                if [[ $started == false ]]
                then
                	osSec
               	else
               		no1
               	fi
                }
    fbacks () {
        dialog --title "Attention!" --msgbox "This operation will open a Github© link in your default browser." 8 40
        clear
        xdg-open 'https://github.com/swanux/helen/issues/new/choose'
        clear
        no1
        }
#Selection menu No. 1
rmEr () {
	exec 3>&1
	result=$(dialog --yesno "Would you like to remove Helen?" 5 65 2>&1 1>&3);
	response=$?
	case $response in
	   1) clear;;
	   0) clear
	sudo su << EOF
	sed -i "/\b\helen\b/d" /etc/bash.bashrc
	clear
	exit
EOF
	rm -rf /home/$USER/.config/Helen
	source /etc/bash.bashrc
	clear
	dialog --msgbox "Done! Changes will fully take effect after reboot." 10 25
	clear
	;;
esac
}
no1 () {
	if [[ $updated == true ]]; then
		clear
		exec 3>&1
		result=$(dialog --yesno "Updated to $version! Would you like to see the changelog?" 10 55 2>&1 1>&3);
		response=$?
		case $response in
		   0) clear && updated=false && about;;
		   1) clear && updated=false;;
		esac
	fi
	if grep -q 'helen' "/etc/bash.bashrc"; then
		iVr="Remove Helen"
	else
		iVr="Install Helen"
	fi
    exec 3>&1
    result=$(dialog --menu "Choose one of the following options:" 15 45 7 \
            1 "Install everything (Simple)" \
             2 "Select what to install (Advanced)" \
             3 "Easter eggs selection" \
             4 "About" \
             5 "Request new feature or report bug" \
             6 "$iVr" \
             7 "Check for updates" 2>&1 1>&3);
    response=$?
    case $response in
       1) cmback="no1" && wexit;;
    esac
    case $result in
	        1)
                all
                ;;
            2)
            	adv
                ;;
            3)
                esEggs
                ;;
            4)
                about
                ;;
            5)
                fbacks
                ;;
            6)
            	if [[ $iVr == "Install Helen" ]]; then
            		ilLer
            	elif [[ $iVr == "Remove Helen" ]]; then
            		rmEr
            	else
            		echo "Error 2"
            		exit
            	fi
            	no1
            	;;
            7)
            	updaterR
            	;;
    esac
    }
ilLer () {
	exec 3>&1
	result=$(dialog --yesno "Would you like to install Helen instead of just running it?" 5 65 2>&1 1>&3);
	response=$?
	case $response in
	   1) clear;;
	   0) clear
	sudo su << EOF
	exit
EOF
	cd
	git clone https://github.com/swanux/helen.git
	cd helen
	cp Helen /home/$USER/.config
	cd
	rm -rf helen
	chmod +x /home/$USER/.config/Helen
	cd /etc/
	sudo su << EOF
	echo "alias helen='/home/$USER/.config/./Helen'" >> /etc/bash.bashrc
	clear
	exit
EOF
	source /etc/bash.bashrc
	clear
	dialog --msgbox "Done! Just type **helen** (without *) to your terminal to start the program. Changes will take effect after reopening the terminal" 20 25
	clear
	;;
esac
}
osSec () {
    exec 3>&1
    result=$(dialog --menu "Select your Linux Distro:" 10 40 2 \
           "1"       "Arch (or based on it)" \
           "2"       "Debian (or based on it)" 2>&1 1>&3);
    response=$?
    case $response in
       1) cmback="osSec" && wexit;;
    esac
    case $result in
		1)
			distro=Arch
			misc="Pakku (AUR helper)"
			Str=exRep
			StrCm=exRep
			doIt=:
			chkStr
			clear
			depChk
			echo 'distrodoneA' >> .config/helen_config.txt
			ilLer
			no1
		    ;;
		2)
			distro=Ubuntu
			misc="Apt-fast"
			clear
		    depChk
		    echo 'distrodoneU' >> .config/helen_config.txt
		    ilLer
		    no1
		    ;;
    esac
}
if grep -q 'distrodoneA' ".config/helen_config.txt"; then
	distro=Arch
	misc="Pakku (AUR helper)"
	no1
elif grep -q 'distrodoneU' ".config/helen_config.txt"; then
	distro=Ubuntu
	misc="Apt-fast"
	no1
else
	sudo apt install dialog || sudo pacman -S dialog
	osSec
fi
